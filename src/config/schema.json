{
  "$ref": "#/definitions/Config",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Config": {
      "additionalProperties": false,
      "properties": {
        "endpoints": {
          "items": {
            "$ref": "#/definitions/Endpoint"
          },
          "type": "array"
        }
      },
      "required": [
        "endpoints"
      ],
      "type": "object"
    },
    "Endpoint": {
      "additionalProperties": false,
      "properties": {
        "body": {
          "$ref": "#/definitions/EndpointBody"
        },
        "headers": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "method": {
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "type": "string"
        },
        "override": {
          "$ref": "#/definitions/JSONSchema"
        },
        "queryParams": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "typeName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "typeName",
        "url",
        "method"
      ],
      "type": "object"
    },
    "EndpointBody": {
      "anyOf": [
        {
          "$ref": "#/definitions/JsonObject"
        },
        {
          "$ref": "#/definitions/JsonArray"
        },
        {
          "type": "string"
        }
      ]
    },
    "JSONSchema": {
      "properties": {
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "$ref": "#/definitions/JSONSchema4Version"
        },
        "additionalItems": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/JSONSchema4"
            }
          ],
          "description": "May only be defined when \"items\" is defined, and is a tuple of JSONSchemas.\n\nThis provides a definition for additional items in an array instance when tuple definitions of the items is provided.  This can be false to indicate additional items in the array are not allowed, or it can be a schema that defines the schema of the additional items."
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/JSONSchema4"
            }
          ],
          "description": "This attribute defines a schema for all properties that are not explicitly defined in an object type definition. If specified, the value MUST be a schema or a boolean. If false is provided, no additional properties are allowed beyond the properties defined in the schema. The default value is an empty schema which allows any value for additional properties."
        },
        "allOf": {
          "items": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "type": "array"
        },
        "anyOf": {
          "items": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "type": "array"
        },
        "default": {
          "$ref": "#/definitions/JSONSchema4Type"
        },
        "definitions": {
          "additionalProperties": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "type": "object"
        },
        "dependencies": {
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/JSONSchema4"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ]
          },
          "type": "object"
        },
        "deprecated": {
          "description": "property exists at least in https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.9.3",
          "type": "boolean"
        },
        "description": {
          "description": "This attribute is a string that provides a full description of the of purpose the instance property.",
          "type": "string"
        },
        "enum": {
          "description": "This provides an enumeration of all possible values that are valid for the instance property. This MUST be an array, and each item in the array represents a possible value for the instance value. If this attribute is defined, the instance value MUST be one of the values in the array in order for the schema to be valid.",
          "items": {
            "$ref": "#/definitions/JSONSchema4Type"
          },
          "type": "array"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "extends": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "The value of this property MUST be another schema which will provide a base schema which the current schema will inherit from.  The inheritance rules are such that any instance that is valid according to the current schema MUST be valid according to the referenced schema.  This MAY also be an array, in which case, the instance MUST be valid for all the schemas in the array.  A schema that extends another schema MAY define additional attributes, constrain existing attributes, or add other constraints.\n\nConceptually, the behavior of extends can be seen as validating an instance against all constraints in the extending schema as well as the extended schema(s)."
        },
        "format": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema4"
            },
            {
              "items": {
                "$ref": "#/definitions/JSONSchema4"
              },
              "type": "array"
            }
          ],
          "description": "This attribute defines the allowed items in an instance array, and MUST be a schema or an array of schemas.  The default value is an empty schema which allows any value for items in the instance array.\n\nWhen this attribute value is a schema and the instance value is an array, then all the items in the array MUST be valid according to the schema.\n\nWhen this attribute value is an array of schemas and the instance value is an array, each position in the instance array MUST conform to the schema in the corresponding position for this array.  This called tuple typing.  When tuple typing is used, additional items are allowed, disallowed, or constrained by the \"additionalItems\" (Section 5.6) attribute using the same rules as \"additionalProperties\" (Section 5.4) for objects."
        },
        "maxItems": {
          "type": "number"
        },
        "maxLength": {
          "type": "number"
        },
        "maxProperties": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        },
        "minItems": {
          "type": "number"
        },
        "minLength": {
          "type": "number"
        },
        "minProperties": {
          "type": "number"
        },
        "minimum": {
          "type": "number"
        },
        "multipleOf": {
          "type": "number"
        },
        "not": {
          "$ref": "#/definitions/JSONSchema4"
        },
        "oneOf": {
          "items": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "type": "array"
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "description": "This attribute is an object that defines the schema for a set of property names of an object instance. The name of each property of this attribute's object is a regular expression pattern in the ECMA 262/Perl 5 format, while the value is a schema. If the pattern matches the name of a property on the instance object, the value of the instance's property MUST be valid against the pattern name's schema value.",
          "type": "object"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "description": "This attribute is an object with property definitions that define the valid values of instance object property values. When the instance value is an object, the property values of the instance object MUST conform to the property definitions in this object. In this object, each property definition's value MUST be a schema, and the property's name MUST be the name of the instance property that it defines.  The instance property value MUST be valid according to the schema from the property definition. Properties are considered unordered, the order of the instance properties MAY be in any order.",
          "type": "object"
        },
        "required": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "This attribute indicates if the instance must have a value, and not be undefined. This is false by default, making the instance optional."
        },
        "title": {
          "description": "This attribute is a string that provides a short description of the instance property.",
          "type": "string"
        },
        "tsEnumNames": {
          "description": "schema extension to support numeric enums",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tsType": {
          "description": "schema extension to support custom types",
          "type": "string"
        },
        "type": {
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema4TypeName"
            },
            {
              "items": {
                "$ref": "#/definitions/JSONSchema4TypeName"
              },
              "type": "array"
            }
          ],
          "description": "A single type, or a union of simple types"
        },
        "uniqueItems": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "JSONSchema4": {
      "description": "JSON Schema V4",
      "properties": {
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "$ref": "#/definitions/JSONSchema4Version"
        },
        "additionalItems": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/JSONSchema4"
            }
          ],
          "description": "May only be defined when \"items\" is defined, and is a tuple of JSONSchemas.\n\nThis provides a definition for additional items in an array instance when tuple definitions of the items is provided.  This can be false to indicate additional items in the array are not allowed, or it can be a schema that defines the schema of the additional items."
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/JSONSchema4"
            }
          ],
          "description": "This attribute defines a schema for all properties that are not explicitly defined in an object type definition. If specified, the value MUST be a schema or a boolean. If false is provided, no additional properties are allowed beyond the properties defined in the schema. The default value is an empty schema which allows any value for additional properties."
        },
        "allOf": {
          "items": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "type": "array"
        },
        "anyOf": {
          "items": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "type": "array"
        },
        "default": {
          "$ref": "#/definitions/JSONSchema4Type"
        },
        "definitions": {
          "additionalProperties": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "type": "object"
        },
        "dependencies": {
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/JSONSchema4"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ]
          },
          "type": "object"
        },
        "description": {
          "description": "This attribute is a string that provides a full description of the of purpose the instance property.",
          "type": "string"
        },
        "enum": {
          "description": "This provides an enumeration of all possible values that are valid for the instance property. This MUST be an array, and each item in the array represents a possible value for the instance value. If this attribute is defined, the instance value MUST be one of the values in the array in order for the schema to be valid.",
          "items": {
            "$ref": "#/definitions/JSONSchema4Type"
          },
          "type": "array"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "extends": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "The value of this property MUST be another schema which will provide a base schema which the current schema will inherit from.  The inheritance rules are such that any instance that is valid according to the current schema MUST be valid according to the referenced schema.  This MAY also be an array, in which case, the instance MUST be valid for all the schemas in the array.  A schema that extends another schema MAY define additional attributes, constrain existing attributes, or add other constraints.\n\nConceptually, the behavior of extends can be seen as validating an instance against all constraints in the extending schema as well as the extended schema(s)."
        },
        "format": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema4"
            },
            {
              "items": {
                "$ref": "#/definitions/JSONSchema4"
              },
              "type": "array"
            }
          ],
          "description": "This attribute defines the allowed items in an instance array, and MUST be a schema or an array of schemas.  The default value is an empty schema which allows any value for items in the instance array.\n\nWhen this attribute value is a schema and the instance value is an array, then all the items in the array MUST be valid according to the schema.\n\nWhen this attribute value is an array of schemas and the instance value is an array, each position in the instance array MUST conform to the schema in the corresponding position for this array.  This called tuple typing.  When tuple typing is used, additional items are allowed, disallowed, or constrained by the \"additionalItems\" (Section 5.6) attribute using the same rules as \"additionalProperties\" (Section 5.4) for objects."
        },
        "maxItems": {
          "type": "number"
        },
        "maxLength": {
          "type": "number"
        },
        "maxProperties": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        },
        "minItems": {
          "type": "number"
        },
        "minLength": {
          "type": "number"
        },
        "minProperties": {
          "type": "number"
        },
        "minimum": {
          "type": "number"
        },
        "multipleOf": {
          "type": "number"
        },
        "not": {
          "$ref": "#/definitions/JSONSchema4"
        },
        "oneOf": {
          "items": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "type": "array"
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "description": "This attribute is an object that defines the schema for a set of property names of an object instance. The name of each property of this attribute's object is a regular expression pattern in the ECMA 262/Perl 5 format, while the value is a schema. If the pattern matches the name of a property on the instance object, the value of the instance's property MUST be valid against the pattern name's schema value.",
          "type": "object"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/JSONSchema4"
          },
          "description": "This attribute is an object with property definitions that define the valid values of instance object property values. When the instance value is an object, the property values of the instance object MUST conform to the property definitions in this object. In this object, each property definition's value MUST be a schema, and the property's name MUST be the name of the instance property that it defines.  The instance property value MUST be valid according to the schema from the property definition. Properties are considered unordered, the order of the instance properties MAY be in any order.",
          "type": "object"
        },
        "required": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "This attribute indicates if the instance must have a value, and not be undefined. This is false by default, making the instance optional."
        },
        "title": {
          "description": "This attribute is a string that provides a short description of the instance property.",
          "type": "string"
        },
        "type": {
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema4TypeName"
            },
            {
              "items": {
                "$ref": "#/definitions/JSONSchema4TypeName"
              },
              "type": "array"
            }
          ],
          "description": "A single type, or a union of simple types"
        },
        "uniqueItems": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "JSONSchema4Array": {
      "items": {
        "$ref": "#/definitions/JSONSchema4Type"
      },
      "type": "array"
    },
    "JSONSchema4Object": {
      "additionalProperties": {
        "$ref": "#/definitions/JSONSchema4Type"
      },
      "type": "object"
    },
    "JSONSchema4Type": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/JSONSchema4Object"
        },
        {
          "$ref": "#/definitions/JSONSchema4Array"
        },
        {
          "type": "null"
        }
      ]
    },
    "JSONSchema4TypeName": {
      "enum": [
        "string",
        "number",
        "integer",
        "boolean",
        "object",
        "array",
        "null",
        "any"
      ],
      "type": "string"
    },
    "JSONSchema4Version": {
      "description": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-04/schema#'\n- 'http://json-schema.org/draft-04/hyper-schema#'\n- 'http://json-schema.org/draft-03/schema#'\n- 'http://json-schema.org/draft-03/hyper-schema#'",
      "type": "string"
    },
    "JsonArray": {
      "items": {
        "$ref": "#/definitions/JsonValue"
      },
      "type": "array"
    },
    "JsonObject": {
      "additionalProperties": {
        "$ref": "#/definitions/JsonValue"
      },
      "type": "object"
    },
    "JsonPrimitive": {
      "type": [
        "string",
        "number",
        "boolean",
        "null"
      ]
    },
    "JsonValue": {
      "anyOf": [
        {
          "$ref": "#/definitions/JsonPrimitive"
        },
        {
          "$ref": "#/definitions/JsonObject"
        },
        {
          "$ref": "#/definitions/JsonArray"
        }
      ]
    }
  }
}